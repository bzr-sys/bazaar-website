---
interface Props {
  /** Set a width with any unit. e.g. 100px or 2rem */
  width: string;
}

const { width } = Astro.props;
---

<div
  class="spanner-wrapper"
  style={`width: ${width}; transform-origin: center;`}
>
  <svg
    style={`transform-origin: center;`}
    class="spanner-svg"
    viewBox="0 0 512 512"
    xmlns="http://www.w3.org/2000/svg"
    aria-hidden="true"
  >
    <path
      d="m469.54 120.52a16 16 0 0 0 -25.54-4l-61.44 61.48a16.12 16.12 0 0 1 -22.63 0l-26.56-26.6a16 16 0 0 1 0-22.63l61.18-61.19a16 16 0 0 0 -4.78-25.92c-46.21-20.66-103.89-9.88-140.26 26.22-30.9 30.68-40.11 78.62-25.25 131.53a15.89 15.89 0 0 1 -4.49 16l-166.48 152.05a64.17 64.17 0 1 0 90.6 90.64l153.68-166.85a15.9 15.9 0 0 1 15.77-4.57 179.3 179.3 0 0 0 46.22 6.37c33.4 0 62.71-10.81 83.85-31.64 39.15-38.57 45.12-103.99 26.13-140.89zm-370.06 326.63a32 32 0 1 1 28.34-28.35 32 32 0 0 1 -28.34 28.35z"
    ></path>
  </svg>
</div>

<style is:global>
  a:hover .spanner-wrapper {
    animation: 0.4s throw-up-and-catch ease-in-out;
  }

  @keyframes throw-up-and-catch {
    0% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(-10px);
    }
    100% {
      transform: translateY(0);
    }
  }

  a:hover .spanner-svg {
    animation: 0.4s hover-spanner-throw ease-in-out;
  }

  @keyframes hover-spanner-throw {
    0% {
      transform: rotateZ(0deg) scale(1);
    }
    100% {
      transform: rotateZ(-360deg) scale(1);
    }
  }
</style>
