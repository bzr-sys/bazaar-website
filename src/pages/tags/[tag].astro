---
import type {
  InferGetStaticParamsType,
  InferGetStaticPropsType,
  GetStaticPaths,
  MarkdownInstance,
} from "astro";
import PageLayout from "../../layouts/PageLayout.astro";

export const getStaticPaths = (async () => {
  const allPosts: MarkdownInstance<Record<string, any>>[] =
    await Astro.glob("../blog/*.md");

  const uniqueTags = [
    ...new Set(allPosts.map((post) => post.frontmatter.tags).flat()),
  ];

  return uniqueTags.map((tag) => {
    const filteredPosts = allPosts.filter((post) =>
      post.frontmatter.tags?.includes(tag),
    );
    return { params: { tag }, props: { posts: filteredPosts } };
  });
}) satisfies GetStaticPaths;

type Params = InferGetStaticParamsType<typeof getStaticPaths>;
type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { tag } = Astro.params as Params;
const { posts } = Astro.props as Props;
---

<PageLayout title={tag}>
  <h1>Posts tagged with: <em>{tag}</em></h1>
  <ul>
    {
      posts.map((post) => (
        <li>
          <a href={post.url}>{post.frontmatter.title}</a>
        </li>
      ))
    }
  </ul>
</PageLayout>
